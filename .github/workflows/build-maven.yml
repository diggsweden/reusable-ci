# SPDX-FileCopyrightText: 2025 The Reusable CI Authors
#
# SPDX-License-Identifier: CC0-1.0
# Maven Builder
# 
# Purpose: Builds Maven projects (applications or libraries) and uploads artifacts
# for subsequent publishing steps. Separates build logic from registry-specific publishing.
#
# Build Types:
#   - app: Standard application JAR (no sources/javadoc)
#   - lib: Library with sources and javadoc JARs (required for Maven Central)
#
# Outputs:
#   - Artifacts uploaded as 'maven-build-artifacts' for use by publish-* workflows
#
# Required Permissions:
#   contents: read  # Checkout code
#
name: Build Maven Project
on:
  workflow_call:
    inputs:
      build-type:
        description: "Build type: app (application) or lib (library with sources/javadoc)"
        required: true
        type: string
      java-version:
        description: "Java version"
        required: true
        type: string
      working-directory:
        description: "Working directory"
        required: false
        default: "."
        type: string
      skip-tests:
        description: "Skip tests during build"
        required: false
        default: false
        type: boolean
      branch:
        description: "Branch to checkout"
        required: false
        default: "main"
        type: string
      profile:
        description: "Maven profile to activate (e.g., central-release for libraries)"
        required: false
        default: ""
        type: string
permissions:
  contents: read
env:
  MAVEN_CLI_OPTS: "--batch-mode --no-transfer-progress --errors --fail-at-end -Dstyle.color=always"
jobs:
  build-maven:
    name: Build Maven ${{ inputs['build-type'] }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165  # v5.0.0
        with:
          java-version: ${{ inputs['java-version'] }}
          distribution: 'temurin'
          cache: maven
          cache-dependency-path: ${{ inputs['working-directory'] }}/pom.xml
      - name: Get version info
        id: version-info
        working-directory: ${{ inputs['working-directory'] }}
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

          if [[ "${VERSION}" == *-SNAPSHOT ]]; then
            echo "IS_SNAPSHOT=true" >> "$GITHUB_OUTPUT"
          else
            echo "IS_SNAPSHOT=false" >> "$GITHUB_OUTPUT"
          fi

          GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          echo "GROUP_ID=${GROUP_ID}" >> "$GITHUB_OUTPUT"
          echo "ARTIFACT_ID=${ARTIFACT_ID}" >> "$GITHUB_OUTPUT"

          echo "Project: ${GROUP_ID}:${ARTIFACT_ID}:${VERSION}"
      - name: Build application
        if: ${{ inputs['build-type'] == 'app' }}
        working-directory: ${{ inputs['working-directory'] }}
        run: |
          echo "Building Maven application..."
          mvn $MAVEN_CLI_OPTS clean package ${{ inputs['skip-tests'] && '-DskipTests' || '' }}
      - name: Build library with sources and javadoc
        if: ${{ inputs['build-type'] == 'lib' }}
        working-directory: ${{ inputs['working-directory'] }}
        run: |
          echo "Building Maven library with sources and javadoc..."

          # Determine profile argument
          PROFILE_ARG=""
          if [ -n "${{ inputs['profile'] }}" ]; then
            PROFILE_ARG="-P${{ inputs['profile'] }}"
            echo "Using Maven profile: ${{ inputs['profile'] }}"
          fi

          mvn $MAVEN_CLI_OPTS clean compile $PROFILE_ARG

          if [ "${{ inputs['skip-tests'] }}" != "true" ]; then
            echo "Running tests..."
            mvn $MAVEN_CLI_OPTS test $PROFILE_ARG
          fi

          echo "Creating library package with sources and javadoc..."
          # Skip GPG signing during build (will be done during publish)
          mvn $MAVEN_CLI_OPTS package -DskipTests=${{ inputs['skip-tests'] }} $PROFILE_ARG -Dgpg.skip=true
      - name: List built artifacts
        working-directory: ${{ inputs['working-directory'] }}
        run: |
          echo "Built artifacts:"
          ls -lh target/*.jar 2>/dev/null || echo "No JAR files found"
          ls -lh target/*.war 2>/dev/null || echo "No WAR files found"
      - name: Upload Maven artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: maven-build-artifacts
          path: |
            ${{ inputs['working-directory'] }}/target/*.jar
            ${{ inputs['working-directory'] }}/target/*.war
            ${{ inputs['working-directory'] }}/target/*.pom
            !${{ inputs['working-directory'] }}/target/original-*.jar
          retention-days: 7
          if-no-files-found: error
      - name: Generate build summary
        run: |
          echo "## Maven Build Summary ðŸ”¨" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ inputs['build-type'] }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact:** \`${{ steps.version-info.outputs.GROUP_ID }}:${{ steps.version-info.outputs.ARTIFACT_ID }}:${{ steps.version-info.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Java:** ${{ inputs['java-version'] }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ${{ inputs['skip-tests'] && 'âŠ˜ Skipped' || 'âœ“ Executed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Snapshot:** ${{ steps.version-info.outputs.IS_SNAPSHOT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY
