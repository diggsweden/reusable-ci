# SPDX-FileCopyrightText: 2025 The Reusable CI Authors
#
# SPDX-License-Identifier: CC0-1.0

# Gradle Application Publisher for GitHub Releases
# 
# Purpose: Builds Gradle applications (APK/AAB for Android, JARs for JVM apps) and
# publishes artifacts to GitHub Releases. Handles the complete build lifecycle including
# dependency resolution, compilation, testing, and artifact generation.
#
# How it works:
# 1. Sets up specified Java version (17, 21, etc.)
# 2. Sets up Android SDK (if building Android apps)
# 3. Optionally configures Android keystore for signed builds
# 4. Runs Gradle build with configured tasks
# 5. Generates SBOM for supply chain security
# 6. Uploads artifacts as workflow artifacts for release attachment
#
# Security controls:
# - Uses GITHUB_TOKEN for authenticated operations
# - Optional Android keystore signing with base64-encoded secrets
# - SBOM generation for artifact provenance
# - Validates build outputs before upload
#
# Required Secrets (if enableSigning: true):
#   ANDROID_KEYSTORE: Base64-encoded keystore file
#   ANDROID_KEYSTORE_PASSWORD: Keystore password
#   ANDROID_KEY_ALIAS: Key alias
#   ANDROID_KEY_PASSWORD: Key password
#
# Required Permissions:
#   contents: read   # Read source code
#   packages: write  # Publish artifacts
#   id-token: write  # For attestations
#
# Generated Artifacts:
#   - APK files (Android apps): app/build/outputs/apk/**/*.apk
#   - AAB files (Android bundles): app/build/outputs/bundle/**/*.aab
#   - JAR files (JVM apps): build/libs/*.jar
#   - SBOM: sbom.cyclonedx.json
#
# Gradle Configuration:
#   - Uses Gradle wrapper
#   - Caches Gradle dependencies for faster builds
#   - Supports product flavors and build variants
name: Publish Gradle Application to GitHub
on:
  workflow_call:
    inputs:
      javaVersion:
        description: "Java version (default: 21)"
        required: false
        type: string
        default: "21"
      gradleTasks:
        description: "Gradle tasks to run (default: build assembleRelease bundleRelease)"
        required: false
        type: string
        default: "build assembleRelease bundleRelease"
      buildModule:
        description: "Gradle module name (default: app)"
        required: false
        type: string
        default: "app"
      attachPattern:
        description: "Artifact pattern for release (default: app/build/outputs/**/*.{apk,aab})"
        required: false
        type: string
        default: "app/build/outputs/**/*.{apk,aab}"
      enableSigning:
        description: "Enable Android keystore signing (default: false)"
        required: false
        type: boolean
        default: false
      workingDirectory:
        description: "Working directory (default: .)"
        required: false
        type: string
        default: "."
      branch:
        description: "Branch to checkout (default: main)"
        required: false
        type: string
        default: "main"
      skipTests:
        description: "Skip tests during build (default: false)"
        required: false
        type: boolean
        default: false
permissions:
  contents: read
jobs:
  publish-gradle-app:
    name: Publish Gradle Application
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
      
      - name: Set up JDK
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.javaVersion }}
          cache: 'gradle'
      
      - name: Set up Android SDK
        uses: android-actions/setup-android@00854ea68c109d98c75d956347303bf7c45b0277 # v3.2.1
      
      - name: Make gradlew executable
        working-directory: ${{ inputs.workingDirectory }}
        run: chmod +x ./gradlew
      
      - name: Decode Android keystore
        if: inputs.enableSigning
        working-directory: ${{ inputs.workingDirectory }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE }}
        run: |
          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > release.keystore
            echo "✅ Android keystore decoded successfully"
          else
            echo "::error::ANDROID_KEYSTORE secret not found but enableSigning is true"
            exit 1
          fi
      
      - name: Build Gradle project
        working-directory: ${{ inputs.workingDirectory }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEYSTORE_FILE: ${{ inputs.enableSigning && 'release.keystore' || '' }}
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "Building Gradle application with tasks: ${{ inputs.gradleTasks }}"
          
          if [ "${{ inputs.skipTests }}" = "true" ]; then
            ./gradlew ${{ inputs.gradleTasks }} -x test
          else
            ./gradlew ${{ inputs.gradleTasks }}
          fi
          
          echo "✅ Gradle build completed"
      
      - name: List build outputs
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          echo "Build outputs:"
          find . -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.jar" \) -exec ls -lh {} \; || echo "No artifacts found"
      
      - name: Generate SBOM
        uses: anchore/sbom-action@fc9beaebddc8c59f94c0f2bd3ebe078bbb2d488a # v0.17.10
        with:
          path: ${{ inputs.workingDirectory }}
          format: cyclonedx-json
          output-file: sbom.cyclonedx.json
          artifact-name: gradle-sbom.cyclonedx.json
      
      - name: Upload Gradle artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: gradle-artifacts
          path: |
            ${{ inputs.workingDirectory }}/${{ inputs.attachPattern }}
            ${{ inputs.workingDirectory }}/build/libs/*.jar
            !${{ inputs.workingDirectory }}/**/*-unaligned.apk
            !${{ inputs.workingDirectory }}/**/*-unsigned.apk
          retention-days: 1
          if-no-files-found: warn
      
      - name: Upload SBOM
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: gradle-sbom
          path: sbom.cyclonedx.json
          retention-days: 1
      
      - name: Upload artifacts to release
        if: ${{ inputs.attachPattern != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          echo "Uploading artifacts to GitHub release..."
          
          if gh release view "${{ github.ref_name }}" > /dev/null 2>&1; then
            echo "Release ${{ github.ref_name }} exists, uploading artifacts..."
            
            shopt -s nullglob
            for pattern in ${{ inputs.attachPattern }}; do
              for file in $pattern; do
                if [ -f "$file" ]; then
                  echo "Uploading $file..."
                  gh release upload "${{ github.ref_name }}" "$file" --clobber || true
                fi
              done
            done
          else
            echo "Warning: Release ${{ github.ref_name }} not found. Artifacts will be uploaded later."
          fi
      
      - name: Generate build summary
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          echo "# 📦 Gradle Application Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🎯 Build Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Java Version** | ${{ inputs.javaVersion }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Gradle Tasks** | \`${{ inputs.gradleTasks }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Module** | ${{ inputs.buildModule }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Signed** | ${{ inputs.enableSigning && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Time** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          
          # Detect project type
          PROJECT_TYPE="Gradle Application"
          if [ -f "app/build.gradle.kts" ] || [ -f "app/build.gradle" ]; then
            if grep -q "com.android.application" app/build.gradle* 2>/dev/null; then
              PROJECT_TYPE="Android Application"
            fi
          fi
          echo "| **Project Type** | $PROJECT_TYPE |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 Built Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| File | Type | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
          
          find . -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.jar" \) | while read -r file; do
            if [[ ! "$file" =~ (unaligned|unsigned) ]]; then
              FILE_NAME=$(basename "$file")
              FILE_SIZE=$(ls -lh "$file" | awk '{print $5}')
              FILE_EXT="${FILE_NAME##*.}"
              
              case $FILE_EXT in
                apk) TYPE="APK (Android Package)" ;;
                aab) TYPE="AAB (Android Bundle)" ;;
                jar) TYPE="JAR (Java Archive)" ;;
                *) TYPE="Unknown" ;;
              esac
              
              echo "| \`$FILE_NAME\` | $TYPE | $FILE_SIZE |" >> $GITHUB_STEP_SUMMARY
            fi
          done || echo "| No artifacts found | - | - |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Distribution" >> $GITHUB_STEP_SUMMARY
          echo "| Location | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **GitHub Release** | [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **SBOM** | Generated (CycloneDX format) |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY
