# SPDX-FileCopyrightText: 2025 The Reusable CI Authors
#
# SPDX-License-Identifier: CC0-1.0

# Release Orchestrator
# 
# Purpose: Main orchestrator workflow that coordinates the complete release process for
# production releases. It handles version management, artifact publishing, container 
# building, security attestations, and GitHub release creation in a single workflow.
#
# How it works:
# 1. Validates release prerequisites (version match, credentials, permissions)
# 2. Bumps version and generates changelog using git-cliff
# 3. Publishes artifacts to configured registries (Maven Central, NPM, GitHub Packages)
# 4. Builds and publishes container images with SLSA/SBOM if configured
# 5. Creates GitHub release with changelog, artifacts, and signatures
#
# Security controls:
# - GPG signing of all artifacts (if signatures: true)
# - SLSA provenance attestation for supply chain security
# - SBOM generation in multiple formats (CycloneDX, SPDX)
# - Container vulnerability scanning with Trivy
# - License compliance checking
#
# Required Secrets (depending on configuration):
#   GITHUB_TOKEN: Automatically provided for GitHub operations
#   GPG_SECRET_KEY: For artifact signing (if signatures enabled)
#   GPG_PASSPHRASE: For artifact signing (if signatures enabled)
#   MAVEN_CENTRAL_USERNAME: For Maven Central publishing (maven-lib-mavencentral)
#   MAVEN_CENTRAL_PASSWORD: For Maven Central publishing (maven-lib-mavencentral)
#   NPM_TOKEN: For NPM registry publishing (npm packages)
#
# Required Permissions:
#   contents: write       # Create releases and tags
#   packages: write       # Publish packages and containers
#   id-token: write      # OIDC for attestations
#   attestations: write  # Attach SBOMs
#   security-events: write # Upload scan results
#   actions: read        # Read workflow for SLSA
#
# v2 Design - Clean Break
# - Everything uses unified "publishers" pattern (no containerBuilder)
# - All configuration under config.* namespace
# - Single artifact: inline parameters
# - Monorepo: artifactsConfig file
#
# Publishers follow {tech}-{type}-{target} pattern:
#   - maven-app-github, maven-lib-mavencentral
#   - npm-app-github, npm-lib-npmjs
#   - container-image-ghcr, container-image-dockerhub
name: Release Orchestrator
on:
  workflow_call: # yamllint disable-line rule:truthy
    inputs:
      # === SINGLE ARTIFACT MODE ===
      projectType:
        description: "Project type: maven, npm, gradle, container (leave empty for monorepo mode)"
        required: false
        type: string
      
      publishers:
        description: "Comma-separated publishers: maven-app-github,container-image-ghcr"
        required: false
        type: string
      
      workingDirectory:
        description: "Working directory (default: .)"
        required: false
        type: string
        default: "."
      
      # Configuration (unified namespace for all publisher types)
      config.javaversion:
        description: "Java version (default: 21)"
        required: false
        type: string
        default: "21"
      
      config.nodeversion:
        description: "Node version (default: 22)"
        required: false
        type: string
        default: "22"
      
      config.attachpattern:
        description: "Pattern for artifacts to attach to release (default: target/*.jar)"
        required: false
        type: string
        default: "target/*.jar"
      
      config.npmtag:
        description: "NPM publish tag (default: latest)"
        required: false
        type: string
        default: "latest"
      
      config.settingspath:
        description: "Path to Maven settings.xml (for maven-lib-mavencentral)"
        required: false
        type: string
      
      config.jreleaserenabled:
        description: "Enable JReleaser Maven plugin (for maven-lib-mavencentral)"
        required: false
        type: boolean
        default: false
      
      config.containerfile:
        description: "Path to Containerfile (default: Containerfile)"
        required: false
        type: string
        default: "Containerfile"
      
      config.platforms:
        description: "Container platforms (default: linux/amd64,linux/arm64)"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
      
      config.registry:
        description: "Container registry (default: ghcr.io)"
        required: false
        type: string
        default: "ghcr.io"
      
      config.enableslsa:
        description: "Enable SLSA provenance (default: true)"
        required: false
        type: boolean
        default: true
      
      config.enablesbom:
        description: "Generate SBOM (default: true)"
        required: false
        type: boolean
        default: true
      
      config.enablescan:
        description: "Enable vulnerability scanning (default: true)"
        required: false
        type: boolean
        default: true
      
      # === MONOREPO MODE ===
      artifactsConfig:
        description: "Path to artifacts config file for monorepo (e.g., .github/artifacts.yml)"
        required: false
        type: string
        default: ""
      
      # === SHARED CONFIGURATION ===
      releaseType:
        description: "Release type: stable, prerelease (auto-detected from tag if not specified)"
        required: false
        type: string
      branch:
        description: "Branch to work with (default: main)"
        required: false
        default: "main"
        type: string
      # Changelog creator configuration
      changelogCreator:
        description: "Changelog creator type (e.g., git-cliff). Leave empty to skip"
        required: false
        default: "git-cliff"
        type: string
      changelog.config:
        description: "Changelog configuration file (default: uses generate-changelog default)"
        required: false
        default: ""
        type: string
      changelog.skipversionbump:
        description: "Skip version bump (default: false)"
        required: false
        default: false
        type: boolean
      # Release publisher configuration  
      releasePublisher:
        description: "Release publisher type (jreleaser or github-cli). Leave empty to skip GitHub release"
        required: false
        type: string
      release.config:
        description: "Release configuration file (for JReleaser, default: jreleaser.yml)"
        required: false
        default: "jreleaser.yml"
        type: string
      release.generatesbom:
        description: "Generate SBOM for release (default: true)"
        required: false
        default: true
        type: boolean
      release.attachartifacts:
        description: "Glob patterns for artifacts to attach to GitHub release (comma/newline separated)"
        required: false
        default: ""
        type: string
      release.signartifacts:
        description: "GPG sign release artifacts (default: true)"
        required: false
        default: true
        type: boolean
      release.checkauthorization:
        description: "Check if user is authorized for non-SNAPSHOT releases (default: false, true for maven-lib-mavencentral)"
        required: false
        default: false
        type: boolean
      release.draft:
        description: "Create as draft release (default: false)"
        required: false
        default: false
        type: boolean
      # Advanced configuration
      workingDirectory:
        description: "Working directory for operations"
        required: false
        default: "."
        type: string
      file_pattern:
        description: "Files to commit in version bump (auto-detected based on projectType if not specified: Maven='CHANGELOG.md pom.xml', NPM='CHANGELOG.md package.json package-lock.json', Gradle='CHANGELOG.md build.gradle settings.gradle')"
        required: false
        type: string
        default: ""
concurrency:
  group: release-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false # Queue releases, don't cancel partial releases
permissions:
  contents: read # Best Security practice. Jobs only get read as base, and then permissions are added as needed
jobs:
  # Step 0a: Setup defaults based on project type
  setup-defaults:
    name: Setup Defaults
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      file_pattern: ${{ steps.set-defaults.outputs.file_pattern }}
    steps:
      - name: Set project type defaults
        id: set-defaults
        run: |
          # Set file_pattern based on project type if not explicitly provided
          if [ -n "${{ inputs.file_pattern }}" ]; then
            # User provided explicit value, use it
            echo "file_pattern=${{ inputs.file_pattern }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect based on project type
            case "${{ inputs.projectType }}" in
              npm)
                echo "file_pattern=CHANGELOG.md package.json package-lock.json" >> $GITHUB_OUTPUT
                ;;
              maven)
                echo "file_pattern=CHANGELOG.md pom.xml" >> $GITHUB_OUTPUT
                ;;
              gradle)
                echo "file_pattern=CHANGELOG.md build.gradle settings.gradle" >> $GITHUB_OUTPUT
                ;;
              python)
                echo "file_pattern=CHANGELOG.md pyproject.toml" >> $GITHUB_OUTPUT
                ;;
              *)
                # Fallback for unknown project types
                echo "file_pattern=CHANGELOG.md" >> $GITHUB_OUTPUT
                ;;
            esac
          fi
  # Step 0b: Parse Configuration (v2 clean design)
  detect-mode:
    name: Parse Configuration
    runs-on: ubuntu-latest
    needs: [setup-defaults]
    permissions:
      contents: read
    outputs:
      artifacts: ${{ steps.parse.outputs.artifacts }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      
      - name: Parse configuration
        id: parse
        run: |
          if [ -n "${{ inputs.artifactsConfig }}" ]; then
            # ============================================
            # MONOREPO MODE: Load from file
            # ============================================
            echo "::notice::Monorepo mode: Loading from ${{ inputs.artifactsConfig }}"
            
            if [ ! -f "${{ inputs.artifactsConfig }}" ]; then
              echo "::error::artifactsConfig specified but file not found: ${{ inputs.artifactsConfig }}"
              exit 1
            fi
            
            ARTIFACTS=$(yq eval -o=json '.artifacts' "${{ inputs.artifactsConfig }}")
            
            if [ "$ARTIFACTS" = "null" ] || [ "$ARTIFACTS" = "[]" ]; then
              echo "::error::No artifacts found in ${{ inputs.artifactsConfig }}"
              exit 1
            fi
            
            echo "artifacts=$ARTIFACTS" >> $GITHUB_OUTPUT
            ARTIFACT_COUNT=$(echo "$ARTIFACTS" | jq 'length')
            echo "::notice::Loaded $ARTIFACT_COUNT artifacts"
            
          else
            # ============================================
            # SINGLE ARTIFACT MODE: Build from inputs
            # ============================================
            echo "::notice::Single artifact mode"
            
            if [ -z "${{ inputs.projectType }}" ] || [ -z "${{ inputs.publishers }}" ]; then
              echo "::error::Single artifact mode requires projectType and publishers"
              exit 1
            fi
            
            # Parse publishers (comma-separated)
            IFS=',' read -ra PUBLISHER_ARRAY <<< "${{ inputs.publishers }}"
            PUBLISHERS_JSON=$(printf '%s\n' "${PUBLISHER_ARRAY[@]}" | xargs | jq -R 'split(" ")')
            
            # Build artifact JSON
            ARTIFACTS=$(cat <<EOF | jq -c
          [{
            "name": "app",
            "projectType": "${{ inputs.projectType }}",
            "workingDirectory": "${{ inputs.workingDirectory }}",
            "publishers": $PUBLISHERS_JSON,
            "config": {
              "javaversion": "${{ inputs['config.javaversion'] }}",
              "nodeversion": "${{ inputs['config.nodeversion'] }}",
              "attachpattern": "${{ inputs['config.attachpattern'] }}",
              "npmtag": "${{ inputs['config.npmtag'] }}",
              "settingspath": "${{ inputs['config.settingspath'] }}",
              "jreleaserenabled": ${{ inputs['config.jreleaserenabled'] }},
              "containerfile": "${{ inputs['config.containerfile'] }}",
              "platforms": "${{ inputs['config.platforms'] }}",
              "registry": "${{ inputs['config.registry'] }}",
              "enableslsa": ${{ inputs['config.enableslsa'] }},
              "enablesbom": ${{ inputs['config.enablesbom'] }},
              "enablescan": ${{ inputs['config.enablescan'] }}
            }
          }]
          EOF
          )
            echo "artifacts=$ARTIFACTS" >> $GITHUB_OUTPUT
          fi
          
          # Print summary
          echo "## Artifacts to Build" >> $GITHUB_STEP_SUMMARY
          echo "$ARTIFACTS" | jq -r '.[] | "### \(.name)\n- **Type:** \(.projectType)\n- **Publishers:** \(.publishers | join(", "))\n- **Directory:** \(.workingDirectory)\n"' >> $GITHUB_STEP_SUMMARY
  # Step 0c: Validate configuration
  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    needs: [setup-defaults, detect-mode]
    permissions:
      contents: read
    steps:
      - name: Validate workflow inputs
        run: |
          echo "## Configuration Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Configuration validated**" >> $GITHUB_STEP_SUMMARY
          
          # Basic validation - artifacts loaded successfully in detect-mode
          # Additional validations can be added here as needed
  # Step 0d: Validate Prerequisites
  validate-prerequisites:
    name: Validate Prerequisites
    needs: [setup-defaults, detect-mode, validate-config]
    secrets: inherit
    uses: ./.github/workflows/release-prerequisites.yml
    with:
      projectType: ${{ inputs.projectType }}
      useJReleaser: ${{ inputs.releasePublisher == 'jreleaser' }}
      artifactPublisher: ${{ inputs.publishers }}
      containerRegistry: ${{ inputs['config.registry'] }}
      signArtifacts: ${{ inputs['release.signartifacts'] }}
      checkAuthorization: ${{ contains(inputs.publishers, 'maven-lib-mavencentral') || inputs['release.checkauthorization'] }}
      branch: ${{ inputs.branch }}
      workflowsRef: v2
  # Step 1: Version Bump (iterates over all artifacts)
  version-and-changelog:
    needs: [setup-defaults, detect-mode, validate-prerequisites]
    name: Version Bump - ${{ matrix.artifact.name }}
    if: ${{ !inputs['changelog.skipversionbump'] && inputs.changelogCreator == 'git-cliff' }}
    strategy:
      matrix:
        artifact: ${{ fromJson(needs.detect-mode.outputs.artifacts) }}
      fail-fast: false
    permissions:
      contents: write
      packages: read
    secrets: inherit
    uses: ./.github/workflows/version-bump.yml
    with:
      branch: ${{ inputs.branch }}
      projectType: ${{ matrix.artifact.projectType }}
      file_pattern: ${{ needs.setup-defaults.outputs.file_pattern }}
      javaVersion: ${{ matrix.artifact.config.javaversion }}
      nodeVersion: ${{ matrix.artifact.config.nodeversion }}
      workingDirectory: ${{ matrix.artifact.workingDirectory }}
  # Step 2a: Publish Maven Application
  publish-maven-app:
    name: Publish Maven - ${{ matrix.artifact.name }}
    needs: [detect-mode, version-and-changelog]
    strategy:
      matrix:
        artifact: ${{ fromJson(needs.detect-mode.outputs.artifacts) }}
      fail-fast: false
    # Only run for artifacts with maven-app-github or maven-lib-github in publishers
    if: ${{ !failure() && !cancelled() && (contains(toJson(matrix.artifact.publishers), 'maven-app-github') || contains(toJson(matrix.artifact.publishers), 'maven-lib-github')) }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-maven-app-github.yml
    with:
      javaVersion: ${{ matrix.artifact.config.javaversion }}
      workingDirectory: ${{ matrix.artifact.workingDirectory }}
      branch: ${{ inputs.branch }}
      attachPattern: ${{ matrix.artifact.config.attachpattern }}
  # Step 2b: Publish Maven Library to Maven Central
  publish-maven-lib:
    name: Publish Maven Central - ${{ matrix.artifact.name }}
    needs: [detect-mode, version-and-changelog]
    strategy:
      matrix:
        artifact: ${{ fromJson(needs.detect-mode.outputs.artifacts) }}
      fail-fast: false
    # Only run for artifacts with maven-lib-mavencentral in publishers
    if: ${{ !failure() && !cancelled() && contains(toJson(matrix.artifact.publishers), 'maven-lib-mavencentral') }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-maven-lib-central.yml
    with:
      javaVersion: ${{ matrix.artifact.config.javaversion }}
      workingDirectory: ${{ matrix.artifact.workingDirectory }}
      branch: ${{ inputs.branch }}
      settingsPath: ${{ matrix.artifact.config.settingspath }}
      jreleaserEnabled: ${{ matrix.artifact.config.jreleaserenabled }}
      changelogConfig: ${{ inputs['changelog.config'] }}
  # Step 2c: Publish NPM Application
  publish-npm-app:
    name: Publish NPM - ${{ matrix.artifact.name }}
    needs: [detect-mode, version-and-changelog]
    strategy:
      matrix:
        artifact: ${{ fromJson(needs.detect-mode.outputs.artifacts) }}
      fail-fast: false
    # Only run for artifacts with npm-app-github or npm-lib-github in publishers
    if: ${{ !failure() && !cancelled() && (contains(toJson(matrix.artifact.publishers), 'npm-app-github') || contains(toJson(matrix.artifact.publishers), 'npm-lib-github')) }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-npm-app-github.yml
    with:
      nodeVersion: ${{ matrix.artifact.config.nodeversion }}
      workingDirectory: ${{ matrix.artifact.workingDirectory }}
      branch: ${{ inputs.branch }}
      npmTag: ${{ matrix.artifact.config.npmtag }}
  # Step 3: Build and Publish Container Images
  publish-container:
    name: Publish Container - ${{ matrix.artifact.name }}
    needs: [detect-mode, publish-maven-app, publish-npm-app]
    strategy:
      matrix:
        artifact: ${{ fromJson(needs.detect-mode.outputs.artifacts) }}
      fail-fast: false
    # Only run for artifacts with container-image-* in publishers
    if: ${{ !failure() && !cancelled() && (contains(toJson(matrix.artifact.publishers), 'container-image-ghcr') || contains(toJson(matrix.artifact.publishers), 'container-image-dockerhub')) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
      actions: read
      attestations: write
    secrets: inherit
    uses: ./.github/workflows/build-container-ghcr.yml
    with:
      containerfile: ${{ matrix.artifact.config.containerfile }}
      context: ${{ matrix.artifact.workingDirectory }}
      branch: ${{ inputs.branch }}
      platforms: ${{ matrix.artifact.config.platforms }}
      enableSLSA: ${{ matrix.artifact.config.enableslsa }}
      enableSBOM: ${{ matrix.artifact.config.enablesbom }}
      enableScan: ${{ matrix.artifact.config.enablescan }}
      registry: ${{ matrix.artifact.config.registry }}
      projectType: ${{ matrix.artifact.projectType }}
      pushImage: true
  # Step 4: Create GitHub Release  
  create-release:
    name: Create GitHub Release
    needs: [publish-maven-app, publish-npm-app, publish-maven-lib, publish-container]
    # Run even if previous jobs were skipped but at least one succeeded
    if: ${{ !failure() && !cancelled() && (inputs.releasePublisher == 'jreleaser' || inputs.releasePublisher == 'github-cli') }}
    permissions:
      contents: write
      packages: read
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/release-github.yml
    with:
      releaseName: "${{ github.ref_name }}"
      checkoutRef: ${{ inputs.branch }}
      attachArtifacts: ${{ inputs['release.attachartifacts'] }}
      generateSBOM: ${{ inputs['release.generatesbom'] }}
      signArtifacts: ${{ inputs['release.signartifacts'] }}
      draft: ${{ inputs['release.draft'] }}
      useJReleaser: ${{ inputs.releasePublisher == 'jreleaser' }}
      jreleaserConfig: ${{ inputs['release.config'] }}
      projectType: ${{ inputs.projectType }}
      changelogConfig: ${{ inputs['changelog.config'] }}
      makeLatest: ${{ (inputs.releaseType == 'stable' || (!inputs.releaseType && !contains(github.ref_name, '-'))) && 'true' || 'false' }}
  # Final summary
  release-summary:
    name: Release Summary
    needs: [detect-mode, version-and-changelog, publish-maven-app, publish-npm-app, publish-maven-lib, publish-container, create-release]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Generate Release Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # Release Summary
          
          ## Release Overview
          | Property | Value |
          |----------|-------|
          | **Version** | `${{ github.ref_name }}` |
          | **Branch** | `${{ inputs.branch }}` |
          | **Commit** | `${{ github.sha }}` |
          | **Released By** | @${{ github.actor }} |
          EOF
          
          echo "| **Released At** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ## Job Status
          | Job | Status |
          |-----|--------|
          EOF
          
          echo "| Version Bump | ${{ needs.version-and-changelog.result == 'success' && '✅' || needs.version-and-changelog.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Maven Publish | ${{ needs.publish-maven-app.result == 'success' && '✅' || needs.publish-maven-app.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Publish | ${{ needs.publish-npm-app.result == 'success' && '✅' || needs.publish-npm-app.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Maven Central | ${{ needs.publish-maven-lib.result == 'success' && '✅' || needs.publish-maven-lib.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Build | ${{ needs.publish-container.result == 'success' && '✅' || needs.publish-container.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result == 'success' && '✅' || needs.create-release.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ## Resources
          - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
          - [Packages](https://github.com/${{ github.repository }}/packages)
          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF "cat >> $GITHUB_STEP_SUMMARY << 'EOF'\n# Release Summary\n\n## Release Overview\n| Property | Value |\n|----------|-------|\n| **Version** | `${{ github.ref_name }}` |\n| **Type** | ${{ inputs.releaseType == 'stable' && 'Stable' || contains(github.ref_name, '-alpha') && 'Alpha' || contains(github.ref_name, '-beta') && 'Beta' || contains(github.ref_name, '-rc') && 'Release Candidate' || contains(github.ref_name, '-snapshot') && 'Snapshot' || contains(github.ref_name, '-SNAPSHOT') && 'Snapshot' || 'Stable' }} |\n| **Source Branch** | `${{ inputs.branch }}` |\n| **Commit** | `${{ github.sha }}` |\n| **Released By** | @${{ github.actor }} |\nEOF\n\n# Add current timestamp\necho \"| **Released At** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |\" >> $GITHUB_STEP_SUMMARY\n\ncat >> $GITHUB_STEP_SUMMARY << 'EOF'\n\n## What Was Published\n| Component | Status | Details |\n|-----------|--------|---------|\nEOF\n\n# Maven Application\nif [ \"${{ inputs.artifactPublisher }}\" = \"maven-app-github\" ]; then\n  if [ \"${{ needs.publish-maven-app.result }}\" = \"success\" ]; then\n    echo \"| **Maven Package** | ✅ Published | [View in GitHub Packages](https://github.com/${{ github.repository }}/packages) |\" >> $GITHUB_STEP_SUMMARY\n  else\n    echo \"| **Maven Package** | ❌ Failed | Check workflow logs |\" >> $GITHUB_STEP_SUMMARY\n  fi\nelif [ \"${{ inputs.artifactPublisher }}\" = \"maven-lib-mavencentral\" ]; then\n  if [ \"${{ needs.publish-maven-lib.result }}\" = \"success\" ]; then\n    echo \"| **Maven Library** | ✅ Published | Maven Central |\" >> $GITHUB_STEP_SUMMARY\n  else\n    echo \"| **Maven Library** | ❌ Failed | Check workflow logs |\" >> $GITHUB_STEP_SUMMARY\n  fi\nfi\n\n# NPM Package\nif [ \"${{ inputs.artifactPublisher }}\" = \"npm-app-github\" ]; then\n  if [ \"${{ needs.publish-npm-app.result }}\" = \"success\" ]; then\n    echo \"| **NPM Package** | ✅ Published | [View in npm Registry](https://github.com/${{ github.repository }}/packages) |\" >> $GITHUB_STEP_SUMMARY\n  else\n    echo \"| **NPM Package** | ❌ Failed | Check workflow logs |\" >> $GITHUB_STEP_SUMMARY\n  fi\nfi\n\n# Container\nif [ \"${{ inputs.containerBuilder }}\" = \"containerimage-ghcr\" ]; then\n  if [ \"${{ needs.publish-container.result }}\" = \"success\" ]; then\n    CONTAINER_NAME=$(echo \"${{ github.repository }}\" | tr '[:upper:]' '[:lower:]')\n    echo \"| **Container Image** | ✅ Published | [ghcr.io/${CONTAINER_NAME}:${{ github.ref_name }}](https://github.com/${{ github.repository }}/pkgs/container/$(basename ${{ github.repository }})) |\" >> $GITHUB_STEP_SUMMARY\n  elif [ \"${{ needs.publish-container.result }}\" = \"skipped\" ]; then\n    echo \"| **Container Image** | ⏭️ Skipped | Not configured |\" >> $GITHUB_STEP_SUMMARY\n  else\n    echo \"| **Container Image** | ❌ Failed | Check workflow logs |\" >> $GITHUB_STEP_SUMMARY\n  fi\nelse\n  echo \"| **Container Image** | ⏭️ Skipped | Not configured |\" >> $GITHUB_STEP_SUMMARY\nfi\n\n# GitHub Release\nif [ \"${{ needs.create-release.result }}\" = \"success\" ]; then\n  echo \"| **GitHub Release** | ✅ Created | [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}) |\" >> $GITHUB_STEP_SUMMARY\nelif [ \"${{ needs.create-release.result }}\" = \"skipped\" ]; then\n  echo \"| **GitHub Release** | ⏭️ Skipped | Not configured |\" >> $GITHUB_STEP_SUMMARY\nelse\n  echo \"| **GitHub Release** | ❌ Failed | Check workflow logs |\" >> $GITHUB_STEP_SUMMARY\nfi\n\ncat >> $GITHUB_STEP_SUMMARY << 'EOF'\n\n## 🔒 Security & Compliance\n| Check | Status | Details |\n|-------|--------|---------|\n| **Tag Validation** | ✅ Passed | Annotated & Signed |\n| **GPG Signature** | ${{ inputs['release.signartifacts'] && '✅ Signed' || '⏭️ Not configured' }} | OSPO_BOT |\nEOF\n\n# Add SLSA info if container was built\nif [ \"${{ inputs.containerBuilder }}\" = \"containerimage-ghcr\" ] && [ \"${{ needs.publish-container.result }}\" = \"success\" ]; then\n  CONTAINER_NAME=$(echo \"${{ github.repository }}\" | tr '[:upper:]' '[:lower:]')\n  if [ \"${{ inputs['container.enableslsa'] }}\" = \"true\" ]; then\n    echo \"| **SLSA Provenance** | ✅ Level 3 | [View Attestation](https://github.com/${{ github.repository }}/attestations) |\" >> $GITHUB_STEP_SUMMARY\n  else\n    echo \"| **SLSA Provenance** | ⏭️ Disabled | Not configured |\" >> $GITHUB_STEP_SUMMARY\n  fi\n  \n  if [ \"${{ inputs['container.enablesbom'] }}\" = \"true\" ]; then\n    echo \"| **SBOM** | ✅ Generated | Available in container registry |\" >> $GITHUB_STEP_SUMMARY\n  else\n    echo \"| **SBOM** | ⏭️ Disabled | Not configured |\" >> $GITHUB_STEP_SUMMARY\n  fi\n  \n  if [ \"${{ inputs['container.enablescan'] }}\" = \"true\" ]; then\n    echo \"| **Vulnerability Scan** | ✅ Completed | [Security tab](https://github.com/${{ github.repository }}/security/code-scanning) |\" >> $GITHUB_STEP_SUMMARY\n  else\n    echo \"| **Vulnerability Scan** | ⏭️ Disabled | Not configured |\" >> $GITHUB_STEP_SUMMARY\n  fi\nfi\n\n# Quick start section\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"          ## Quick Start\" >> $GITHUB_STEP_SUMMARY\n\n# Container pull command\nif [ \"${{ inputs.containerBuilder }}\" = \"containerimage-ghcr\" ] && [ \"${{ needs.publish-container.result }}\" = \"success\" ]; then\n  CONTAINER_NAME=$(echo \"${{ github.repository }}\" | tr '[:upper:]' '[:lower:]')\n  echo '```bash' >> $GITHUB_STEP_SUMMARY\n  echo \"# Pull with Podman\" >> $GITHUB_STEP_SUMMARY\n  echo \"podman pull ghcr.io/${CONTAINER_NAME}:${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n  echo '```' >> $GITHUB_STEP_SUMMARY\nfi\n\n# Maven dependency\nif [ \"${{ inputs.projectType }}\" = \"maven\" ] && [ \"${{ inputs.artifactPublisher }}\" = \"maven-app-github\" ]; then\n  echo '```xml' >> $GITHUB_STEP_SUMMARY\n  echo \"<!-- Add to pom.xml -->\" >> $GITHUB_STEP_SUMMARY\n  echo \"<dependency>\" >> $GITHUB_STEP_SUMMARY\n  echo \"  <groupId>GROUP_ID</groupId>\" >> $GITHUB_STEP_SUMMARY\n  echo \"  <artifactId>ARTIFACT_ID</artifactId>\" >> $GITHUB_STEP_SUMMARY\n  echo \"  <version>${{ github.ref_name }}</version>\" >> $GITHUB_STEP_SUMMARY\n  echo \"</dependency>\" >> $GITHUB_STEP_SUMMARY\n  echo '```' >> $GITHUB_STEP_SUMMARY\nfi\n\n# NPM install\nif [ \"${{ inputs.projectType }}\" = \"npm\" ] && [ \"${{ inputs.artifactPublisher }}\" = \"npm-app-github\" ]; then\n  echo '```bash' >> $GITHUB_STEP_SUMMARY\n  echo \"# Install with npm\" >> $GITHUB_STEP_SUMMARY\n  echo \"npm install @${{ github.repository }}@${{ github.ref_name }}\" >> $GITHUB_STEP_SUMMARY\n  echo '```' >> $GITHUB_STEP_SUMMARY\nfi\n\ncat >> $GITHUB_STEP_SUMMARY << 'EOF'\n\n## Release Resources\n- **[GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})** - Release notes and assets\n- **[Changelog](https://github.com/${{ github.repository }}/blob/${{ inputs.branch }}/CHANGELOG.md)** - Version history\n- **[Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Build details\n- **[All Packages](https://github.com/${{ github.repository }}/packages)** - Package registry\n- **[All Releases](https://github.com/${{ github.repository }}/releases)** - Release history\n\nEOF\n\n# Add footer with actual timestamp\necho \"\" >> $GITHUB_STEP_SUMMARY\necho \"---\" >> $GITHUB_STEP_SUMMARY\necho \"*Release workflow completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')* • [View all workflows](https://github.com/${{ github.repository }}/actions)\" >> $GITHUB_STEP_SUMMARY\n"
